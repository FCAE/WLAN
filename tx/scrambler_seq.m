%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%       Written by Micha Anholt, Metalink Broadband
%       Contact   micha_a@metalinkbb.com
%       www.metalinkbb.com
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% scrambler function
% function scr_bits = scrambler_seq(start,size)
%      Input: start - scrambler initialization
%             size  - length of sequence to scrambler
%      Output: scrambler sequence to xor with bits
%
function scr_bits = scrambler_seq(start,size)
% periodic scrambler sequence
scr_seq =...
[...
     0     0     0     0     1     1     1     0     1     1     1     1 ...
     0     0     1     0     1     1     0     0     1     0     0     1 ...
     0     0     0     0     0     0     1     0     0     0     1     0 ...
     0     1     1     0     0     0     1     0     1     1     1     0 ...
     1     0     1     1     0     1     1     0     0     0     0     0 ...
     1     1     0     0     1     1     0     1     0     1     0     0 ...
     1     1     1     0     0     1     1     1     1     0     1     1 ...
     0     1     0     0     0     0     1     0     1     0     1     0 ...
     1     1     1     1     1     0     1     0     0     1     0     1 ...
     0     0     0     1     1     0     1     1     1     0     0     0 ...
     1     1     1     1     1     1     1];
%map scrambler bits to register value
scr_init_seq = filter (2.^(0:6),1,[scr_seq scr_seq(1:6)]);
% find where matches start value
init_loc  = find(scr_init_seq(7:end)==start)+6;
% generate periodic sequence that starts from init value
scr_bits = scr_seq(1+mod(init_loc+(0:size-1),127));
    